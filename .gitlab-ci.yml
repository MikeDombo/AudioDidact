stages:
  - test
  - stage
  - deploy

before_script:
  - echo "deb http://ftp.debian.org/debian jessie-backports main" >> /etc/apt/sources.list
  - echo "deb http://ftp.debian.org/debian jessie main non-free contrib" >> /etc/apt/sources.list
  - apt-get update -yqq && apt-get install -yqq ffmpeg zip unzip python-software-properties
  - curl -sL https://deb.nodesource.com/setup_9.x | bash -
  - apt-get install nodejs
  - pecl update-channels
  - pecl install -f xdebug-2.5.5
  # Install PHP extensions
  - docker-php-ext-install pdo_mysql
  - docker-php-ext-enable xdebug
  # Install and run Composer
  - curl -sS https://getcomposer.org/installer | php
  - cd src
  - rm -f composer.lock
  - php ../composer.phar require --no-update phpunit/phpunit:^5.7
  - php ../composer.phar install --no-dev
  
# Set any variables we need
variables:
  # Configure mysql environment variables (https://hub.docker.com/r/_/mysql/)
  MYSQL_DATABASE: podtube
  MYSQL_ROOT_PASSWORD: root

# Run our tests
# If Xdebug was installed you can generate a coverage report and see code coverage metrics.

test:7.0:
  stage: test
  # This file is a template, and might need editing before it works on your project.
  # Select image from https://hub.docker.com/_/php/
  image: php:7.0
  services:
    - mysql:5.7
  script:
    - vendor/bin/phpunit --configuration ../phpunit.xml --coverage-text --colors=never

test:5.6:
  stage: test
  # This file is a template, and might need editing before it works on your project.
  # Select image from https://hub.docker.com/_/php/
  image: php:5.6
  services:
    - mysql:5.7
  script:
    - vendor/bin/phpunit --configuration ../phpunit.xml --coverage-text --colors=never
  
test:latest:
  stage: test
  image: php:latest
  services:
    - mysql:5.7
  before_script:
    - echo "deb http://ftp.debian.org/debian jessie-backports main" >> /etc/apt/sources.list
    - echo "deb http://ftp.debian.org/debian jessie main non-free contrib" >> /etc/apt/sources.list
    - apt-get update -yqq && apt-get install -yqq ffmpeg zip unzip python-software-properties
    - curl -sL https://deb.nodesource.com/setup_9.x | bash -
    - apt-get install nodejs
    - pecl update-channels
    - pecl install -f xdebug
    # Install PHP extensions
    - docker-php-ext-install pdo_mysql
    - docker-php-ext-enable xdebug
    # Install and run Composer
    - curl -sS https://getcomposer.org/installer | php
    - cd src
    - rm -f composer.lock
    - php ../composer.phar require --no-update phpunit/phpunit:^5.7
    - php ../composer.phar install --no-dev
  script:
    - vendor/bin/phpunit --configuration ../phpunit.xml --coverage-text --colors=never
  
stage:
  stage: stage
  environment:
    name: Staging
  before_script:
    - which ssh-agent || ( apt-get update -yqq && apt-get install openssh-client -yqq )
    - eval $(ssh-agent -s)
    - ssh-add <(echo "$SSH_PRIVATE_KEY" | base64 -d)
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan -H $DEPLOY_IP >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - scp -r src/* gitlab@$DEPLOY_IP:/var/www/html/ytpod-beta/
    - ssh gitlab@$DEPLOY_IP -tt "chown -R gitlab:www-data /var/www/html/ytpod-beta/*"

deploy:
  stage: deploy
  before_script: 
    - which ssh-agent || ( apt-get update -yqq && apt-get install openssh-client -yqq )
    - eval $(ssh-agent -s)
    - ssh-add <(echo "$SSH_PRIVATE_KEY" | base64 -d)
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan -H $DEPLOY_IP >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script: 
    - scp -r src/* gitlab@$DEPLOY_IP:/var/www/html/ytpod/
    - ssh gitlab@$DEPLOY_IP -tt "chown -R gitlab:www-data /var/www/html/ytpod/*"
  environment:
    name: Production
  when: manual
  only:
    - master
