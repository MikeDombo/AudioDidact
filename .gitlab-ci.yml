stages:
  - test
  - stage
  - deploy

before_script:
- echo "deb http://ftp.uk.debian.org/debian jessie-backports main" >> /etc/apt/sources.list
- apt-get update -yqq
- apt-get install -yqq ffmpeg zip unzip
- pecl install xdebug
# Install PHP extensions
- docker-php-ext-install pdo_mysql
- docker-php-ext-enable xdebug
# Install and run Composer
- curl -sS https://getcomposer.org/installer | php
- cd src
- php ../composer.phar require phpunit/phpunit
- php ../composer.phar install

# Set any variables we need
variables:
  # Configure mysql environment variables (https://hub.docker.com/r/_/mysql/)
  MYSQL_DATABASE: podtube
  MYSQL_ROOT_PASSWORD: root

# Run our tests
# If Xdebug was installed you can generate a coverage report and see code coverage metrics.
test:7.1.1:
  stage: test
  # This file is a template, and might need editing before it works on your project.
  # Select image from https://hub.docker.com/_/php/
  image: php:7.1.1
  services:
  - mysql:5.7
  script:
  - vendor/bin/phpunit --configuration ../phpunit.xml --coverage-text --colors=never

test:7.0:
  stage: test
  # This file is a template, and might need editing before it works on your project.
  # Select image from https://hub.docker.com/_/php/
  image: php:7.0
  services:
  - mysql:5.7
  script:
  - vendor/bin/phpunit --configuration ../phpunit.xml --coverage-text --colors=never

test:5.6:
  stage: test
  # This file is a template, and might need editing before it works on your project.
  # Select image from https://hub.docker.com/_/php/
  image: php:5.6
  services:
  - mysql:5.7
  script:
  - vendor/bin/phpunit --configuration ../phpunit.xml --coverage-text --colors=never
  
test:latest:
  stage: test
  # This file is a template, and might need editing before it works on your project.
  # Select image from https://hub.docker.com/_/php/
  image: php:latest
  services:
  - mysql:5.7
  script:
  - vendor/bin/phpunit --configuration ../phpunit.xml --coverage-text --colors=never
  
stage:
  stage: stage
  environment:
    name: Staging
  before_script: 
    - apt-get update -yqq
    - apt-get install -yqq sshpass openssh-client
  script: 
    - find src/ -type d | sed "s/^[^\/]*\///g" | sed '/^\s*$/d' > directories
    - while IFS='' read -r line || [[ -n "$line" ]]; do sshpass -p "" sftp -o StrictHostKeyChecking=no user@192.168.0.12:htdocs/ytpod-beta/ <<< $"mkdir $line"; sshpass -p "" sftp -o StrictHostKeyChecking=no user@192.168.0.12:htdocs/ytpod-beta/$line <<< $"put src/$line/*"; done < directories
    - sshpass -p "" sftp -o StrictHostKeyChecking=no user@192.168.0.12:htdocs/ytpod-beta/ <<< $"get config.yml"
    - mv config.yml src/config.yml
    - sshpass -p "" sftp -o StrictHostKeyChecking=no user@192.168.0.12:htdocs/ytpod-beta/ <<< $"put src/*"

deploy:
  stage: deploy
  before_script: 
    - apt-get update -yqq
    - apt-get install -yqq sshpass openssh-client
  script: 
    - find src/ -type d | sed "s/^[^\/]*\///g" | sed '/^\s*$/d' > directories
    - while IFS='' read -r line || [[ -n "$line" ]]; do sshpass -p "" sftp -o StrictHostKeyChecking=no user@192.168.0.12:htdocs/ytpod/ <<< $"mkdir $line"; sshpass -p "" sftp -o StrictHostKeyChecking=no user@192.168.0.12:htdocs/ytpod/$line <<< $"put src/$line/*"; done < directories
    - sshpass -p "" sftp -o StrictHostKeyChecking=no user@192.168.0.12:htdocs/ytpod/ <<< $"get config.yml"
    - mv config.yml src/config.yml
    - sshpass -p "" sftp -o StrictHostKeyChecking=no user@192.168.0.12:htdocs/ytpod/ <<< $"put src/*"
  environment:
    name: Production
  when: manual
  only:
  - master